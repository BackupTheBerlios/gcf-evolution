#!/bin/sh

construct_non_overwritten_default_values () {
	test -z "$prefix" && prefix="/home/$wormuser/root"
	
	test -z "$exeprefix" && exeprefix="$prefix/bin"
	
	test -z "$UPDATE_BASHRC" && UPDATE_BASHRC="$CREATE_WORMUSER"
	
	test -z "$wormhome" && wormhome=/home/$wormuser
	
	test -z "$wormcivdir" && wormcivdir="$wormhome/civilisation"

	test -z "$WORMPASS2" && WORMPASS2="$WORMPASS"
}

usage () {
	construct_non_overwritten_default_values
	
	echo "Configure für evolution

© 2003-2005 Bodo Thiesen

Syntax: configure [argumente]

Zulässige Argumente:

	--prefix dir		Basisinstallationsverzeichnis.
				Standard = /home/\$wormuser/root (-> $prefix)
	--exeprefix dir		Installationsverzeichnis für Binaries
				Standard = \$prefix/bin (-> $exeprefix)
	
	--set-owner bool	Setzen des Besitzers der Dateien via chown?
				Standard = $SETOWN
	--set-mode bool		Setzen der Dateirechte der Dateien via chmod?
				Standard = $SETMOD
	
	--set-worm-user user	Unprivilegierter Benutzer für die
				Wurm-Zivilisation.
				Standard = $wormuser
	--set-worm-user2 user	Zweiter unprivilegierter Benutzer für eww
				Standard = $wormuser2
	--set-worm-group group	Unprivilegierte Gruppe für die 
				Wurm-Zivilisation.
				Standard = $wormgroup
	--set-worm-home dir	Homeverzeichnis für den Benutzer $wormuser
				Standard = /home/\$wormuser (-> $wormhome)
	--set-worm-civdir dir	Verzeichnis, in der die Wurmzivilisation ihr 
				Unwesen treiben soll.
				Standard = \$wormhome/civilisation (-> $wormcivdir)
	--set-worm-passwd pass	Setze das anfängliche Passwort vom Wurmuser.
				Standard = "$WORMPASS"
	--set-worm-passwd2 pass	Setze das anfängliche Passwort vom 2. Wurmuser.
				Standard = \$WORMPASS (-> "$WORMPASS2")
	--create-wormuser bool	Soll der Wurmuser durch make install angelegt 
				werden?
				Standard = $CREATE_WORMUSER
	--create-wormuser2 bool	Soll der Wurmuser 2 durch make install angelegt
				werden?
				Standard = $CREATE_WORMUSER2
	--create-wormgroup bool	Soll die Wurmgruppe durch make install angelegt 
				werden?
				Standard = $CREATE_WORMGROUP
	--update-bashrc		Sollen ein paar Umgebungsvariablen (wie PATH) 
				in /home/\$wormuser/.bashrc angepasst werden?
				Standard = \$CREATE_WORMUSER (-> $UPDATE_BASHRC)
	
				Hinweis: Wenn mit --create-wormuser=yes das 
				anlegen des Wurmusers erzwungen wird, und die 
				Wurmgruppe noch nicht existiert, so wird diese 
				auf jeden Fall angelegt, selbst wenn das 
				Gegenteil mit --create-wormgroup=no angefordert 
				wurde.
	
	--set-root-user user	Privilegierter Benutzer für die Administrativen 
				Programme.
				Standard = $rootuser
	--set-root-group group	Privilegierte Gruppe für die Administrativen 
				Programme.
				Standard = $rootgroup
	
	--eww-iter2kill num	Setzt die Anzahl der Iterationen, nach denen 
				eww die zuvor markierten Dateien löscht.
				Standard = $EWW_ITERATIONS_TO_KILL ( \* $EWW_ITERATION_DELAY Sekunden )
	--eww-iter2del num	Setzt die Anzahl der Iterationen, nach denen
				eww die zuvor markierten Prozesse killt.
				Standard = $EWW_ITERATIONS_TO_DELETE ( \* $EWW_ITERATION_DELAY Sekunden )
	--eww-iterdelay num	Setzt die Anzahl der Sekunden pro Iteration.
				Standard = $EWW_ITERATION_DELAY
	
	--wcpy-max-sleep num	Maximale Wartezeit (in ms) zwischen Aufruf 
				durch den Wurm, und dem Beginn der
				Kopieraktion.
				Standard = $WCPY_MAX_SLEEP
	--wcpy-byte-drop num	Durchschnittlich jedes num-te Byte 
				unterschlagen.
				Standard = $WCPY_BYTE_DROP
	--wcpy-byte-add num	Durchschnittlich nach jedem num-ten Byte ein 
				Byte hinzufügen.
				Standard = $WCPY_BYTE_ADD
	--wcpy-byte-chg num	Durchschnittlich jedes num-te Byte verändern.
				Standard = $WCPY_BYTE_CHG
	
	--worm-max-num-procs x	Zu prüfendes rlimit beim Start des Wurms. Der 
				Wurm beendet sich sofort, falls das rlimit 
				höher ist, als dieser Wert.
				Standard = $WORM_MAX_NUM_PROCS
	--strip-worm bool       Soll strip für das Wurm-Binary aufgerufen 
				werden, um dessen Debug-Symbole und anderen 
				Stuss zu entfernen. (Also sozusagen einen Teil 
				des toten Erbgutes entfernen.)
				Standard = $WORM_STRIP
	
	--bash-pid-file file	Dateiname der pidfile, in der eine PID 
				eingetragen werden kann, die wurmkill niemals 
				killt.
				Standard = $BASH_PID_FILE
"
}

#
# Standardwerte setzen
#

SETOWN=yes
SETMOD=yes

wormuser=evouser
wormuser2=ewwuser
wormgroup=evogroup

rootuser=root
rootgroup=root

WORMPASS=""
WORMDESCRIPTION="Benutzer für die Wurmzivilisation"
WORMDESCRIPTION2="Benutzer für eww"
CREATE_WORMUSER=autodetect
CREATE_WORMUSER2=autodetect
CREATE_WORMGROUP=autodetect

EWW_ITERATIONS_TO_KILL=1
EWW_ITERATIONS_TO_DELETE=4
EWW_ITERATION_DELAY=30

WCPY_MAX_SLEEP=20000000
WCPY_BYTE_DROP=30000
WCPY_BYTE_ADD=30000
WCPY_BYTE_CHG=20000

WORM_MAX_NUM_PROCS=500
WORM_STRIP=no

BASH_PID_FILE="/tmp/evolution.bash.pid"

PROC_PATH="/proc"

#
# Kommandozeile auswerten
#

while ! test $# = 0; do
	case "$1" in
		--prefix)
			prefix="$2"; shift; shift; ;;
		
		--exeprefix)
			exeprefix="$2"; shift; shift; ;;
		
		--set-owner)
			SETOWN="$2"; shift; shift; ;;
		
		--set-mode)
			SETMOD="$2"; shift; shift; ;;
		
		--set-worm-user)
			wormuser="$2"; shift; shift; ;;
		
		--set-worm-user2)
			wormuser2="$2"; shift; shift; ;;
		
		--set-worm-group)
			wormgroup="$2"; shift; shift; ;;
		
		--set-worm-home)
			wormhome="$2"; shift; shift; ;;
		
		--set-worm-civdir)
			wormcivdir="$2"; shift; shift; ;;
		
		--set-worm-passwd)
			WORMPASS="$2"; shift; shift; ;;
		
		--set-worm-passwd2)
			WORMPASS2="$2"; shift; shift; ;;
		
		--set-root-user)
			rootuser="$2"; shift; shift; ;;
		
		--set-root-group)
			rootgroup="$2"; shift; shift; ;;
		
		--create-wormuser)
			CREATE_WORMUSER="$2"; shift; shift; ;;
		
		--create-wormuser2)
			CREATE_WORMUSER2="$2"; shift; shift; ;;
		
		--create-wormgroup)
			CREATE_WORMGROUP="$2"; shift; shift; ;;
		
		--eww-iter2kill)
			EWW_ITERATIONS_TO_KILL="$2"; shift; shift; ;;
		
		--eww-iter2del)
			EWW_ITERATIONS_TO_DELETE="$2"; shift; shift; ;;
		
		--eww-iterdelay)
			EWW_ITERATION_DELAY="$2"; shift; shift; ;;
		
		--wcpy-max-sleep)
			WCPY_MAX_SLEEP="$2"; shift; shift; ;;
		
		--wcpy-byte-drop)
			WCPY_BYTE_DROP="$2"; shift; shift; ;;
		
		--wcpy-byte-add)
			WCPY_BYTE_ADD="$2"; shift; shift; ;;
		
		--wcpy-byte-chg)
			WCPY_BYTE_CHG="$2"; shift; shift; ;;
		
		--worm-max-num-procs)
			WORM_MAX_NUM_PROCS="$2"; shift; shift; ;;
		
		--strip-worm)
			WORM_STRIP="$2"; shift; shift; ;;
		
		--bash-pid-file)
			BASH_PID_FILE="$2"; shift; shift; ;;
		
		-help|-HELP|--help|--HELP|--h|--H|-h|-H|-?|--?)
			usage
			exit 1
			;;
		
		*)
			echo "Ungültiges Argument übergeben: $1"
			echo ""
			usage
			exit 2
			;;
	esac
done

#
# Konstruierte Standardwerte setzen, sofern nicht vom Benutzer überschrieben.
#

construct_non_overwritten_default_values

#
# Und ein paar Systemtests machen ...
#

echo -en "Checking if OS is Linux ... "

if (grep --silent 'Linux' /proc/sys/kernel/ostype); then
	echo "yes"
	LDFLAGS=-lpthread
else
	echo "no"
	LDFLAGS=-pthread
fi

echo -en "Checking wether gcc works ... "
echo >configure.c <<EOF
int main();
EOF
if ! gcc -c -o configure.o configure.c; then
	echo "no"
	echo "Failed to find a working C compiler"
	exit 2
fi
echo "yes"
CC=gcc

echo -en "Checking wether g++ works ... "
echo >configure.cpp <<EOF
int main();
EOF
if ! gcc -c -o configure.o configure.cpp; then
	echo "no"
	echo "Failed to find a working C++ compiler"
	exit 2
fi
echo "yes"
CXX=g++

if test "$CREATE_WORMUSER" == "autodetect"; then
	echo -en "Checking if user $wormuser must be created ... "
	if test -z "`grep $wormuser /etc/passwd`"; then
		CREATE_WORMUSER=yes
		if test "$CREATE_WORMGROUP" == "no"; then
			CREATE_WORMGROUP=autodetect
		fi
	else
		CREATE_WORMUSER=no
	fi
	if test "$UPDATE_BASHRC" == "autodetect"; then
		UPDATE_BASHRC=$CREATE_WORMUSER
	fi
	echo $CREATE_WORMUSER
fi

if test "$CREATE_WORMUSER2" == "autodetect"; then
	echo -en "Checking if user $wormuser2 must be created ... "
	if test -z "`grep $wormuser2 /etc/passwd`"; then
		CREATE_WORMUSER2=yes
		if test "$CREATE_WORMGROUP" == "no"; then
			CREATE_WORMGROUP=autodetect
		fi
	else
		CREATE_WORMUSER2=no
	fi
	if test "$UPDATE_BASHRC" == "autodetect"; then
		UPDATE_BASHRC=$CREATE_WORMUSER2
	fi
	echo $CREATE_WORMUSER2
fi

if test "$CREATE_WORMGROUP" == "autodetect"; then
	echo -en "Checking if group $wormgroup must be created ... "
	if test -z "`grep $wormgroup /etc/group`"; then
		CREATE_WORMGROUP=yes
	else
		CREATE_WORMGROUP=no
	fi
	echo $CREATE_WORMGROUP
fi

#
# So, das war's schon, jetzt können wir die Makefile.Config anlegen
#
# Wir legen mal von Anfang an auch eine config.h an, die zukünftig dann von 
# allen Quellen eingebunden werden soll.
#

for i in Makefile.Config src/config.h; do
	rm -f $i
	echo >$i '#if 0
ifdef HOPEFULLY_UNDEFINED_SYMBOL

/*** WARNING *** WARNING *** WARNING *** WARNING *** WARNING ***
 ***                                                         ***
 *** Don'\''t fuck this file, as it is automatically generated. ***
 *** Run configure to change settings instead.               ***
 ***                                                         ***
 *** WARNING *** WARNING *** WARNING *** WARNING *** WARNING ***/

endif
#endif
'
done

echo "LDFLAGS += $LDFLAGS" >> Makefile.Config
echo "" >> Makefile.Config
echo "prefix = \"$prefix\"" >> Makefile.Config
echo "exeprefix = \"$exeprefix\"" >> Makefile.Config

echo "" >> Makefile.Config
if test $SETOWN == yes; then
	echo "CHOWN = chown" >> Makefile.Config
else
	echo "CHOWN = true" >> Makefile.Config
fi
if test $SETMOD == yes; then
	echo "CHMOD = chmod" >> Makefile.Config
else
	echo "CHMOD = true" >> Makefile.Config
fi
echo "CC = $CC" >> Makefile.Config
echo "CXX = $CXX" >> Makefile.Config
if test $WORM_STRIP == yes; then
	echo "WORM_STRIP=true" >> Makefile.Config
fi

echo "" >> Makefile.Config
echo "WORMUSER   = $wormuser"  >> Makefile.Config
echo "WORMUSER2  = $wormuser2" >> Makefile.Config
echo "WORMGROUP  = $wormgroup" >> Makefile.Config
echo "wormhome   = \"$wormhome\""  >> Makefile.Config
echo "wormcivdir = \"$wormcivdir\"" >> Makefile.Config
WORMPASS=`./crypt.pl "$WORMPASS"`
echo "WORMPASS   = \"$WORMPASS\"" >> Makefile.Config
WORMPASS2=`./crypt.pl "$WORMPASS2"`
echo "WORMPASS2  = \"$WORMPASS2\"" >> Makefile.Config
echo "ROOTUSER  = $rootuser"  >> Makefile.Config
echo "ROOTGROUP = $rootgroup" >> Makefile.Config
echo "WORMDESCRIPTION = \"$WORMDESCRIPTION\"" >> Makefile.Config
echo "WORMDESCRIPTION2 = \"$WORMDESCRIPTION2\"" >> Makefile.Config
if test "$CREATE_WORMUSER" == yes; then
	echo "MAKE_INSTALL_CREATE_USER = true" >> Makefile.Config
fi
if test "$CREATE_WORMUSER2" == yes; then
	echo "MAKE_INSTALL_CREATE_USER2 = true" >> Makefile.Config
fi
if test "$CREATE_WORMGROUP" == yes; then
	echo "MAKE_INSTALL_CREATE_GROUP = true" >> Makefile.Config
fi
if test "$UPDATE_BASHRC" == yes; then
	echo "UPDATE_BASHRC = true" >> Makefile.Config
fi

echo "#define EWW_ITERATIONS_TO_KILL ${EWW_ITERATIONS_TO_KILL}" >> src/config.h
echo "#define EWW_ITERATIONS_TO_DELETE ${EWW_ITERATIONS_TO_DELETE}" >> src/config.h
echo "#define EWW_ITERATION_DELAY ${EWW_ITERATION_DELAY}" >> src/config.h
echo "#define WCPY_MAX_SLEEP $WCPY_MAX_SLEEP" >> src/config.h
echo "#define WCPY_BYTE_DROP $WCPY_BYTE_DROP" >> src/config.h
echo "#define WCPY_BYTE_ADD $WCPY_BYTE_ADD" >> src/config.h
echo "#define WCPY_BYTE_CHG $WCPY_BYTE_CHG" >> src/config.h
echo "#define WORM_MAX_NUM_PROCS $WORM_MAX_NUM_PROCS" >> src/config.h
echo "#define BASH_PID_FILE \"$BASH_PID_FILE\"" >> src/config.h
echo "#define EVOUSER \"$wormuser\"" >> src/config.h
echo "#define EWWUSER \"$wormuser2\"" >> src/config.h
echo "#define PROC_PATH \"$PROC_PATH\"" >> src/config.h
echo "#define WORMCIVDIR \"$wormcivdir\"" >> src/config.h

rm configure.* # DON'T REMOVE THE DOT!

echo ""
echo "Now type 'make' and (as root) 'make install' and pray ;-)";
